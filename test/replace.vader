Execute (Prepare for following tests):
  let dir = expand('<sfile>:p:h').'/fixture'
  let lines = ['This is a fixture containing special characters \\\.']
  let fixture = dir.'/fixture.txt'
  if !isdirectory(dir)
    call mkdir(dir)
  endif
  let cwd = getcwd()
  let autoread = &autoread
  set autoread

Before (Initialization for each execution):
  call writefile(lines, fixture)
  if bufexists(fixture)
    exe 'bwipeout! '.bufnr(fixture)
  endif
  exe 'cd '.dir

Execute (replace#qflisttype works well):
  silent noautocmd vimgrep! /fixture/j **/*
  Assert len(getqflist()) == 1
  copen
  Assert replace#qflisttype() == 'quickfix'
  silent noautocmd lvimgrep! /fixture/j **/*
  Assert len(getloclist(0)) == 1
  lopen
  Assert replace#qflisttype() == 'location'

Execute (replace#Replace works well for quickfix-list):
  silent noautocmd vimgrep! /fixture/j **/*
  Assert len(getqflist()) == 1
  copen
  let old = 'fixture'
  let new = 'fixed asset'
  call replace#Replace(1, 0, old, new)
  exe 'edit '.fixture
  Assert getbufline(bufnr('%'), 1)[0] == substitute(lines[0], old, new, 'g')
  unlet old
  unlet new

Execute (replace#Replace works well for location-list):
  silent noautocmd lvimgrep! /fixture/j **/*
  Assert len(getloclist(0)) == 1
  lopen
  let old = 'fixture'
  let new = 'fixed asset'
  call replace#Replace(1, 0, old, new)
  exe 'edit '.fixture
  Assert getbufline(bufnr('%'), 1)[0] == substitute(lines[0], old, new, 'g')
  unlet old
  unlet new

Execute (replace#Replace fails for modified buffers):
  silent noautocmd vimgrep! /fixture/j **/*
  Assert len(getqflist()) == 1
  exe 'buffer '.fixture
  call setbufvar(fixture, '&modified', 1)
  copen
  AssertThrows call replace#Replace(1, 0, 'fixture', 'fixed asset')
  Assert getbufline(bufnr(fixture), 1)[0] == lines[0]

Execute (replace#Replace fails for buffers not modifiable):
  silent noautocmd vimgrep! /fixture/j **/*
  Assert len(getqflist()) == 1
  exe 'buffer '.bufnr(fixture)
  call setbufvar(bufnr(fixture), '&modifiable', 0)
  copen
  AssertThrows call replace#Replace(1, 0, 'fixture', 'fixed asset')
  Assert getbufline(bufnr(fixture), 1)[0] == lines[0]

Execute (replace#Replace fails for buffers not existing any more):
  silent noautocmd vimgrep! /fixture/j **/*
  Assert len(getqflist()) == 1
  call delete(fixture)
  copen
  AssertThrows call replace#Replace(1, 0, 'fixture', 'fixed asset')

Execute (replace#Replace fails for buffers changed after grep):
  silent noautocmd vimgrep! /fixture/j **/*
  Assert len(getqflist()) == 1
  exe 'edit '.fixture
  normal! gg^ciwthis
  write
  copen
  AssertThrows call replace#Replace(1, 0, 'fixture', 'fixed asset')
  Assert getbufline(bufnr(fixture), 1)[0] == lines[0]

Execute (replace#Replace can replace special characters):
  let d = {}
  let d.lnum = 1
  exe 'edit '.fixture
  let d.bufnr = bufnr(fixture)
  let d.col = 0
  let d.valid = 1
  let d.vcol = 0
  let d.nr = -1
  let d.type = ''
  let d.pattern = ''
  let d.text = 'This is a fixture containing special characters \\\.'
  call setqflist([d])
  copen
  call replace#Replace(1, 0, ' \\\', '')
  " FIXME: If this bwipeout and edit are not here, the buffer content is
  " differenct from the original file. I don't know the reason.
  exe 'bwipeout '.bufnr(fixture)
  exe 'edit '.fixture
  Assert getbufline(bufnr(fixture), 1)[0] != lines[0]
  unlet d

Execute (Clean up for preceding tests):
  unlet dir
  unlet lines
  unlet fixture
  exe 'cd '.cwd
  unlet cwd
  let &autoread = autoread
  unlet autoread
