Execute (Prepare for following tests):
  let dir = expand('<sfile>:p:h').'/fixture'
  let lines = [
        \ 'This is a fixture containing special characters \\\.',
        \ 'The directory in which this exists is also named `fixture`.'
        \ ]
  let fixture = dir.'/fixture.txt'
  if !isdirectory(dir)
    call mkdir(dir)
  endif
  let old = 'fixture'
  let new = 'fixed asset'
  let item_num = 2
  let cwd = getcwd()
  " If autoread is not set, prompt may be shown by executing checktime command.
  let autoread = &autoread
  set autoread

Before (Initialization for each execution):
  call writefile(lines, fixture)
  if bufexists(fixture)
    exe 'bwipeout! '.bufnr(fixture)
  endif
  exe 'cd '.dir

Execute (replace#qflisttype works well):
  silent noautocmd vimgrep! /fixture/j **/*
  Assert len(getqflist()) == item_num, 'Wrong number of items in quickfix-list'
  copen
  Assert replace#qflisttype() == 'quickfix', 'Detection for quickfix-list failed'
  silent noautocmd lvimgrep! /fixture/j **/*
  Assert len(getloclist(0)) == item_num, 'Wrong number of items in location-list'
  lopen
  Assert replace#qflisttype() == 'location', 'Detection for location-list failed'

Execute (replace#Replace works well for quickfix-list):
  silent noautocmd vimgrep! /fixture/j **/*
  Assert len(getqflist()) == item_num, 'Wrong number of items in quickfix-list'
  copen
  call replace#Replace(1, 0, old, new)
  exe 'edit '.fixture
  Assert getbufline(bufnr('%'), 1)[0] == substitute(lines[0], old, new, 'g'),
        \ 'Replacement failed'

Execute (replace#Replace works well for location-list):
  silent noautocmd lvimgrep! /fixture/j **/*
  Assert len(getloclist(0)) == item_num, 'Wrong number of items in quickfix-list'
  lopen
  call replace#Replace(1, 0, old, new)
  exe 'edit '.fixture
  Assert getbufline(bufnr('%'), 1)[0] == substitute(lines[0], old, new, 'g'),
        \ 'Replacement failed'

Execute (replace#Replace can narrow items for replacement):
  silent noautocmd vimgrep! /fixture/j **/*
  Assert len(getqflist()) == item_num, 'Wrong number of items in quickfix-list'
  copen
  call replace#Replace(1, 1, old, new)
  exe 'edit '.fixture
  Assert getbufline(bufnr('%'), 1)[0] == substitute(lines[0], old, new, 'g'),
        \ 'Replacement failed'
  Assert getbufline(bufnr('%'), 2)[0] == lines[1], 'Failed to narrow'

Execute (replace#Replace fails for modified buffers):
  silent noautocmd vimgrep! /fixture/j **/*
  Assert len(getqflist()) == item_num, 'Wrong number of items in quickfix-list'
  exe 'edit '.fixture
  call setbufvar(fixture, '&modified', 1)
  copen
  AssertThrows call replace#Replace(1, 0, old, new)
  Assert getbufline(bufnr(fixture), 1)[0] == lines[0],
        \ 'Illegal replacement occured'

Execute (replace#Replace fails for buffers not modifiable):
  silent noautocmd vimgrep! /fixture/j **/*
  Assert len(getqflist()) == item_num, 'Wrong number of items in quickfix-list'
  exe 'edit '.fixture
  call setbufvar(bufnr(fixture), '&modifiable', 0)
  copen
  AssertThrows call replace#Replace(1, 0, old, new)
  Assert getbufline(bufnr(fixture), 1)[0] == lines[0],
        \ 'Illegal replacement occured'

Execute (replace#Replace fails for buffers not existing any more):
  silent noautocmd vimgrep! /fixture/j **/*
  Assert len(getqflist()) == item_num, 'Wrong number of items in quickfix-list'
  call delete(fixture)
  copen
  AssertThrows call replace#Replace(1, 0, old, new)

Execute (replace#Replace fails for buffers changed after grep):
  silent noautocmd vimgrep! /fixture/j **/*
  Assert len(getqflist()) == item_num, 'Wrong number of items in quickfix-list'
  exe 'edit '.fixture
  normal! gg^ciwthis
  write
  let result = getbufline(bufnr(fixture), 1)[0]
  copen
  AssertThrows call replace#Replace(1, 0, old, new)
  Assert getbufline(bufnr(fixture), 1)[0] == result,
        \ 'Illegal replacement occured'
  unlet result

Execute (replace#Replace can replace special characters):
  let d = {}
  let d.lnum = 1
  exe 'edit '.fixture
  let d.bufnr = bufnr(fixture)
  let d.col = 0
  let d.valid = 1
  let d.vcol = 0
  let d.nr = -1
  let d.type = ''
  let d.pattern = ''
  let d.text = 'This is a fixture containing special characters \\\.'
  call setqflist([d])
  copen
  call replace#Replace(1, 0, ' \\\', '')
  " FIXME: If this bwipeout and edit are not here, the buffer content is
  " differenct from the original file. I don't know the reason.
  exe 'bwipeout '.bufnr(fixture)
  exe 'edit '.fixture
  Assert getbufline(bufnr(fixture), 1)[0] ==
        \ 'This is a fixture containing special characters.',
        \ 'Replacement failed'
  unlet d

Execute (Clean up for preceding tests):
  unlet dir
  unlet lines
  unlet fixture
  exe 'cd '.cwd
  unlet old
  unlet new
  unlet item_num
  unlet cwd
  let &autoread = autoread
  unlet autoread
